// Package dash provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package dash

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new client token for internal API access.
	// (POST /v1/auth/clients)
	PostV1AuthClients(w http.ResponseWriter, r *http.Request)
	// Returns the health of the cluster.
	// (GET /v1/cluster/health)
	GetV1ClusterHealth(w http.ResponseWriter, r *http.Request, params GetV1ClusterHealthParams)
	// Returns metrics like used CPU, RAM, number of masters and slaves, latency.
	// (GET /v1/cluster/metrics)
	GetV1ClusterMetrics(w http.ResponseWriter, r *http.Request, params GetV1ClusterMetricsParams)
	// List all nodes with optional search filters.
	// (GET /v1/nodes)
	GetV1Nodes(w http.ResponseWriter, r *http.Request, params GetV1NodesParams)
	// List all services with optional search filters.
	// (GET /v1/services)
	GetV1Services(w http.ResponseWriter, r *http.Request, params GetV1ServicesParams)
	// Creates a new service with the provided configuration.
	// (POST /v1/services)
	PostV1Services(w http.ResponseWriter, r *http.Request)
	// Updates an existing service with the provided configuration.
	// (PUT /v1/services)
	PutV1Services(w http.ResponseWriter, r *http.Request)
	// Gets current deployment status of a service
	// (GET /v1/services/deployments/{service_id})
	GetV1ServicesDeploymentsServiceId(w http.ResponseWriter, r *http.Request, serviceId string, params GetV1ServicesDeploymentsServiceIdParams)
	// Create a new deployment for a service.
	// (POST /v1/services/deployments/{service_id})
	PostV1ServicesDeploymentsServiceId(w http.ResponseWriter, r *http.Request, serviceId string)
	// Get the current status of the service. Same as GET /services except for a specific service
	// (GET /v1/services/{service_id})
	GetV1ServicesServiceId(w http.ResponseWriter, r *http.Request, serviceId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostV1AuthClients operation middleware
func (siw *ServerInterfaceWrapper) PostV1AuthClients(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1AuthClients(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1ClusterHealth operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClusterHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ClusterHealthParams

	// ------------- Optional query parameter "dc" -------------

	err = runtime.BindQueryParameter("form", true, false, "dc", r.URL.Query(), &params.Dc)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dc", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1ClusterHealth(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1ClusterMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClusterMetrics(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ClusterMetricsParams

	// ------------- Optional query parameter "dc" -------------

	err = runtime.BindQueryParameter("form", true, false, "dc", r.URL.Query(), &params.Dc)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dc", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1ClusterMetrics(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1Nodes operation middleware
func (siw *ServerInterfaceWrapper) GetV1Nodes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1NodesParams

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	// ------------- Optional query parameter "dc" -------------

	err = runtime.BindQueryParameter("form", true, false, "dc", r.URL.Query(), &params.Dc)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dc", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1Nodes(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1Services operation middleware
func (siw *ServerInterfaceWrapper) GetV1Services(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ServicesParams

	// ------------- Optional query parameter "acl" -------------

	err = runtime.BindQueryParameter("form", true, false, "acl", r.URL.Query(), &params.Acl)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "acl", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	// ------------- Optional query parameter "dc" -------------

	err = runtime.BindQueryParameter("form", true, false, "dc", r.URL.Query(), &params.Dc)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dc", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1Services(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1Services operation middleware
func (siw *ServerInterfaceWrapper) PostV1Services(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1Services(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutV1Services operation middleware
func (siw *ServerInterfaceWrapper) PutV1Services(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV1Services(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1ServicesDeploymentsServiceId operation middleware
func (siw *ServerInterfaceWrapper) GetV1ServicesDeploymentsServiceId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "service_id" -------------
	var serviceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_id", runtime.ParamLocationPath, chi.URLParam(r, "service_id"), &serviceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ServicesDeploymentsServiceIdParams

	// ------------- Optional query parameter "deployment_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "deployment_id", r.URL.Query(), &params.DeploymentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deployment_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1ServicesDeploymentsServiceId(w, r, serviceId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1ServicesDeploymentsServiceId operation middleware
func (siw *ServerInterfaceWrapper) PostV1ServicesDeploymentsServiceId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "service_id" -------------
	var serviceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_id", runtime.ParamLocationPath, chi.URLParam(r, "service_id"), &serviceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1ServicesDeploymentsServiceId(w, r, serviceId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1ServicesServiceId operation middleware
func (siw *ServerInterfaceWrapper) GetV1ServicesServiceId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "service_id" -------------
	var serviceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "service_id", runtime.ParamLocationPath, chi.URLParam(r, "service_id"), &serviceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1ServicesServiceId(w, r, serviceId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/auth/clients", wrapper.PostV1AuthClients)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/cluster/health", wrapper.GetV1ClusterHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/cluster/metrics", wrapper.GetV1ClusterMetrics)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/nodes", wrapper.GetV1Nodes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/services", wrapper.GetV1Services)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/services", wrapper.PostV1Services)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/services", wrapper.PutV1Services)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/services/deployments/{service_id}", wrapper.GetV1ServicesDeploymentsServiceId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/services/deployments/{service_id}", wrapper.PostV1ServicesDeploymentsServiceId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/services/{service_id}", wrapper.GetV1ServicesServiceId)
	})

	return r
}
